REM QCTO EXPORT HEADER
REM VERSION = 1.8.3.385
REM HARNESS_CODE_OWNER_SPEC = DYNAMIC
REM PROGRAM_CODE_OWNER_SPEC = DYNAMIC
REM HARNESS_GUID = {1E408CEA-C0E5-4E17-8827-8EDEFC6AD046}
REM HARNESS_OWNER = %
REM HARNESS_NAME = Q##BETWNSTR
REM HARNESS_TYPE = PACKAGE
REM PROGRAM_OWNER = %
REM PROGRAM_NAME = BETWNSTR
REM PROGRAM_TYPE = FUNCTION
REM Export created on 2009-03-10 12:34:32
REM END QCTO EXPORT HEADER
 
CREATE OR REPLACE PROCEDURE qcto#import_HARNESS_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();QU_CONFIG.TRACE_SUBPROG_start ('Export','HARNESS');
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_ext_setup_code CLOB;
CL_ext_teardown_code CLOB;
CL_ext_tc_exec_code CLOB;
CL_private_declarations CLOB;
CL_private_declare_programs CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_private_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_private_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_ext_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_ext_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_ext_tc_exec_code, TRUE, dur => DBMS_LOB.CALL);
BEGIN IF NOT qu_export_import.merging_on_import () THEN qu_harness_xp.del (owner_in => qu_export_import.import_harness_owner(),name_in => 'Q##BETWNSTR',program_owner_in => qu_export_import.import_program_owner(),program_name_in => 'BETWNSTR',prefix_in => 'Q##',rows_out => l_rows,create_suite_collection_in => TRUE); END IF;
QU_HARNESS_xp.import (universal_id_in => '{1E408CEA-C0E5-4E17-8827-8EDEFC6AD046}',
harness_owner_in => qu_export_import.import_harness_owner(),
name_in => 'Q##BETWNSTR',
description_in => NULL,
test_engine_type_in => 'QuestCodeTesterOracle',
harness_type_in => 'PACKAGE',
program_owner_in => qu_export_import.import_program_owner(),
program_name_in => 'BETWNSTR',
program_type_in => 'FUNCTION',
prefix_in => 'Q##',
suffix_in => NULL,
is_test_harness_in => 'N',
is_example_in => 'N',
IS_LOCKED_in => 'N',
LAST_RUN_STATUS_in => NULL,
PROGRAM_STATUS_in => NULL,
TEST_CODE_STATUS_in => NULL,
TEST_CODE_CURRENT_in => NULL,
TEST_DEFINITION_CURRENT_in => NULL,
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
ext_setup_code_in => CL_ext_setup_code,
ext_teardown_code_in => CL_ext_teardown_code,
ext_tc_exec_code_in => CL_ext_tc_exec_code,
private_declarations_in => CL_private_declarations,
private_declare_programs_in => CL_private_declare_programs,
definition_status_in => 'Under Development',
invoker_rights_in => NULL,
profile_execution_in => 'N',
use_named_notation_in => 'Y',
random_execution_in => 'N',
attribute_count_in => NULL,
methods_count_in => NULL,
predefined_in => NULL,
incomplete_in => NULL,
final_in => NULL,
instantiable_in => NULL,
supertype_owner_in => NULL,
supertype_name_in => NULL,
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_ext_setup_code);
DBMS_LOB.freetemporary (CL_ext_teardown_code);
DBMS_LOB.freetemporary (CL_ext_tc_exec_code);
DBMS_LOB.freetemporary (CL_private_declarations);
DBMS_LOB.freetemporary (CL_private_declare_programs);
END;
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_HARNESS_1;
/
REM EXECUTE
BEGIN qcto#import_HARNESS_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_UNITTEST_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_UNIT_TEST_XP.import (universal_id_in => '{86889A38-09A2-4A0D-8FEB-8C1F98FA7CB0}',harness_guid_in => qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),name_in => 'BETWNSTR',
description_in => 'Unit test for "BETWNSTR"',
program_name_in => 'BETWNSTR',program_type_in => 'FUNCTION',overload_in => NULL,ut_program_name_in => 'Q##BETWNSTR',testing_status_in => 'Y',exception_on_failure_in => NULL,
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
exceptions_in => CL_exceptions,
conditional_execution_in => NULL,
profile_execution_in => 'N',
random_execution_in => 'N',
method_name_in => NULL,
method_no_in => NULL,
method_type_in => NULL,
method_descriptor_in => NULL,
parameters_in => NULL,
results_in => NULL,
final_in => NULL,
instantiable_in => NULL,
overriding_in => NULL,
inherited_in => NULL,
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{386073D9-BAB0-4B75-96B5-D4C52D0A87E1}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'STRING_IN',
description_in => 'Test element for "STRING_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(1),argument_mode_in => 'IN',argument_alias_in => 'L_STRING_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{5C3AC513-A53D-44B5-9FCD-F1AE6B7F1F4B}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'START_IN',
description_in => 'Test element for "START_IN"',
data_type_guid_in => '{6C603D73-8FAC-4C6E-9676-EAB637DB257A}',data_type_name_in => 'PLS_INTEGER',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(2),argument_mode_in => 'IN',argument_alias_in => 'L_START_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{413FCD05-4A04-48DE-A339-387C659166A3}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'END_IN',
description_in => 'Test element for "END_IN"',
data_type_guid_in => '{6C603D73-8FAC-4C6E-9676-EAB637DB257A}',data_type_name_in => 'PLS_INTEGER',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(3),argument_mode_in => 'IN',argument_alias_in => 'L_END_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => '[Function return value]',
description_in => 'Test element for "[Function return value]"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'RETURN',position_in => TO_CHAR(0),argument_mode_in => 'OUT',argument_alias_in => 'Q##FUNCTION_RETURN_VALUE',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_UNITTEST_1;
/
REM EXECUTE
BEGIN qcto#import_UNITTEST_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{AC2B3531-2D46-4D08-BB23-BC6165A8DAED}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'Normal usage - start and end inside string',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##NORMAL_USAGE_START_AND_EN',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_1;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{77603809-E138-4A08-B154-327CBE7B4DCD}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'Zero start same as 1',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##ZERO_START_SAME_AS_1',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_2;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{4B5102E1-01FB-4599-A6DA-063DA125FC1A}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'End past end of string gets rest of string',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##END_PAST_END_OF_STRING_GETS',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_3;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_4 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{E729EDC6-51DA-4E33-8ED4-A6E4EAAD5086}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'End < Start returns NULL',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##END_START_RETURNS_NULL',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_4;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_4;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_5 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{B0F2E636-DF49-49B7-9E93-67EF09B1B6C9}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'Null string returns NULL',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##NULL_STRING_RETURNS_NULL',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_5;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_5;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_6 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{26572844-08FA-47B7-A15E-4B555FD194AE}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'Null end returns NULL',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##NULL_END_RETURNS_NULL',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_6;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_6;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_7 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{8566817E-0113-46BA-A567-8B4813D160FB}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'Null start returns NULL',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##NULL_START_RETURNS_NULL',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_7;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_7;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_8 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{E49AA54F-7AED-4B59-8AD4-AA17F3740109}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),name_in => 'Negative start and end',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##NEGATIVE_START_AND_END',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_8;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_8;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{7821D702-4D14-41B5-B168-7FB2DDE79696}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Normal usage - start and end inside string'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V269348017',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '5';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '5';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{645EE03F-255D-45F8-BA81-8E94FD077B58}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Normal usage - start and end inside string'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1752827961',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'abcdefg';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''abcdefg''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{0F88B5B3-9431-4955-9034-978BFE486C0F}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Normal usage - start and end inside string'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V44648860',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_1;
/
REM EXECUTE
BEGIN qcto#import_INPUT_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'abcdefg';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''abcdefg''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{4ACB1690-9E0B-4B89-8AED-B12BC1D32E45}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Zero start same as 1'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1788826318',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '0';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '0';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{F8C716E1-8C42-4F10-AEE8-6E7624806FD9}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Zero start same as 1'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V604069559',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{BD8DB44D-A842-4854-9125-A29005AAA111}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Zero start same as 1'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1713295309',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_2;
/
REM EXECUTE
BEGIN qcto#import_INPUT_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'abcdefg';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''abcdefg''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{863289E8-B2A0-43A8-A855-0811B5689F44}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End past end of string gets rest of string'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1246935094',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{80B60018-6C39-4884-B1BA-225D48368B1B}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End past end of string gets rest of string'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V911794303',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3333';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '3333';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{DD2801E6-0FF8-4954-A3CE-4B47C724A81E}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End past end of string gets rest of string'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1125655448',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_3;
/
REM EXECUTE
BEGIN qcto#import_INPUT_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_4 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'abcdefg';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''abcdefg''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{86474E16-65B1-4611-A009-510BD2F94F7C}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End < Start returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V782359498',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '33';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '33';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{08CDC8D8-1B6B-40A4-84C7-03D1240630B9}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End < Start returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1806559016',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '5';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '5';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{C6858622-575F-4E90-A8CB-ED2716409A67}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End < Start returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1103248932',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_4;
/
REM EXECUTE
BEGIN qcto#import_INPUT_4;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_5 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{21B45AAF-4660-44F1-871A-FA6C87BB6C82}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null string returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1651493553',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{402A1130-D523-4A93-B6FC-559E654BB863}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null string returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V763626602',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{1D903BED-94AE-4719-9320-EFBBCB8E4024}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null string returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1363904823',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_5;
/
REM EXECUTE
BEGIN qcto#import_INPUT_5;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_6 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'adfasdf';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''adfasdf''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{557FC7D7-2DCB-4F25-9C26-5C05DF86FA8B}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null end returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V734367538',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '4';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '4';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{89681CC4-57CD-4BEF-99E9-DA54C74D7BDB}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null end returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2019870000',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{C60EB01B-0CB0-4E2F-B87B-151358EFE2B5}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null end returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1674646989',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_6;
/
REM EXECUTE
BEGIN qcto#import_INPUT_6;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_7 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'adfadfadf';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''adfadfadf''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{2C5DDBF5-0628-4C9A-AAC6-FBD1E6548969}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null start returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2067365365',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{12D17856-AEDE-43ED-9193-B99E58DE6DEC}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null start returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1947326387',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '5';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '5';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{4828E7D3-0E48-4B71-A81B-C95008343D7C}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null start returns NULL'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V992880485',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_7;
/
REM EXECUTE
BEGIN qcto#import_INPUT_7;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_8 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'abcdefg';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''abcdefg''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{2F727C92-17AB-4B2E-92D7-3C278ADFF435}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Negative start and end'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V319611146',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '-2';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '-2';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{535007BA-20B7-4D94-86EB-1C2228E1E16D}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Negative start and end'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_START_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'START_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1237083138',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '-4';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '-4';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{569C72A5-9A21-4EC7-87F4-AF34C0AE4734}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Negative start and end'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_END_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'PLS_INTEGER';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'END_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V120753490',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_8;
/
REM EXECUTE
BEGIN qcto#import_INPUT_8;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{5B0C4C9F-AE90-4086-895A-1ECCFB914BA9}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Normal usage - start and end inside string'),assertion_type_guid_in => '{43E3B49A-0877-4F51-9526-DCBF345F1563}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Scalar is equal to the expected value?',testing_status_in => 'Y',template_guid_in => '{25499982-A764-42F8-9A6F-C3E416CD3655}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'cde';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''cde''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_1;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{4EA10873-C2E4-4E11-827C-3006BBD8A642}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Zero start same as 1'),assertion_type_guid_in => '{43E3B49A-0877-4F51-9526-DCBF345F1563}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Scalar is equal to the expected value?',testing_status_in => 'Y',template_guid_in => '{25499982-A764-42F8-9A6F-C3E416CD3655}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'abc';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''abc''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_2;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{09E75DF4-4153-4043-B6BB-74AB26AFFF46}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End past end of string gets rest of string'),assertion_type_guid_in => '{43E3B49A-0877-4F51-9526-DCBF345F1563}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Scalar is equal to the expected value?',testing_status_in => 'Y',template_guid_in => '{25499982-A764-42F8-9A6F-C3E416CD3655}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'cdefg';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''cdefg''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_3;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_4 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{9FC0FBFC-EFFF-4484-AC3A-9EE8E1A54503}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'End < Start returns NULL'),assertion_type_guid_in => '{EBB3500B-3545-4CFB-9EBF-AE3EF3A3C1F7}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Value modified by the program is NULL?',testing_status_in => 'Y',template_guid_in => '{70D4CCC1-EBD4-433C-A42F-49876EF7A2BE}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => '',assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1379258027',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_4;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_4;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_5 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{AAC6E066-59AD-4AF8-B677-3588A8687608}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null string returns NULL'),assertion_type_guid_in => '{43E3B49A-0877-4F51-9526-DCBF345F1563}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Scalar is equal to the expected value?',testing_status_in => 'Y',template_guid_in => '{25499982-A764-42F8-9A6F-C3E416CD3655}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_5;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_5;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_6 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{18E88C96-05FE-4877-9143-16FEC48324A6}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null end returns NULL'),assertion_type_guid_in => '{EBB3500B-3545-4CFB-9EBF-AE3EF3A3C1F7}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Value modified by the program is NULL?',testing_status_in => 'Y',template_guid_in => '{70D4CCC1-EBD4-433C-A42F-49876EF7A2BE}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => '',assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V865909326',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_6;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_6;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_7 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{C5C50DB2-F726-467D-8B0C-C39836F2E7C6}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Null start returns NULL'),assertion_type_guid_in => '{43E3B49A-0877-4F51-9526-DCBF345F1563}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Scalar is equal to the expected value?',testing_status_in => 'Y',template_guid_in => '{25499982-A764-42F8-9A6F-C3E416CD3655}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_7;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_7;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_8 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{39DC2E30-CB85-41E8-A408-B881D200B243}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'Negative start and end'),assertion_type_guid_in => '{43E3B49A-0877-4F51-9526-DCBF345F1563}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Scalar is equal to the expected value?',testing_status_in => 'Y',template_guid_in => '{25499982-A764-42F8-9A6F-C3E416CD3655}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'def';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''def''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),'BETWNSTR'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_8;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_8;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_CLEAR_CACHES_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
qu_source_code_xp.clear_caches();
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_CLEAR_CACHES_1;
/
REM EXECUTE
BEGIN qcto#import_CLEAR_CACHES_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_SOURCECODE_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '10',text_in => '        string_in, start_in, end_in - start_in + 1 ));
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '11',text_in => 'END; ');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '1',text_in => 'FUNCTION betwnstr (
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '2',text_in => '   string_in      IN   VARCHAR2
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '3',text_in => ' , start_in       IN   PLS_INTEGER
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '4',text_in => ' , end_in         IN   PLS_INTEGER
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '5',text_in => ')
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '6',text_in => '   RETURN VARCHAR2
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '7',text_in => 'IS
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '8',text_in => 'BEGIN
');
qu_source_code_xp.add_text (type_in => 'FUNCTION',line_in => '9',text_in => '   RETURN ( SUBSTR (
');
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_SOURCECODE_1;
/
REM EXECUTE
BEGIN qcto#import_SOURCECODE_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_SOURCECODE_HDR_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
qu_source_code_xp.add_header_and_save (
 universal_id_in => '{B4D415A7-45B0-4147-8D12-A8D0F47CDE6B}'
, harness_guid_in => qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()),
created_on_in => TO_DATE ('20090310 122821', 'YYYYMMDD HH24MISS'), created_by_in => USER, from_import_in => TRUE);
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_SOURCECODE_HDR_1;
/
REM EXECUTE
BEGIN qcto#import_SOURCECODE_HDR_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_RESULTS_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
QU_result_xp.import (universal_id_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',RESULT_LEVEL_in => 'HARNESS',result_status_in => 'FAILURE',description_in => 'Test failed at this level.',name_in => 'TEST_SCHEMA.BETWNSTR',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{1E408CEA-C0E5-4E17-8827-8EDEFC6AD046}',parent_universal_id_in => '',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',RESULT_LEVEL_in => 'UNITTEST',result_status_in => 'FAILURE',description_in => 'Test failed at this level.',name_in => 'BETWNSTR',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{86889A38-09A2-4A0D-8FEB-8C1F98FA7CB0}',parent_universal_id_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{469BB94D-19A3-494E-877C-56B427D74EEF}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'SUCCESS',description_in => 'Test succeeded up to this level.',name_in => 'Null end returns NULL',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{26572844-08FA-47B7-A15E-4B555FD194AE}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{172DA496-8AC4-41CC-B02F-00FEF86C2F99}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{469BB94D-19A3-494E-877C-56B427D74EEF}',parent_universal_id_in => '{469BB94D-19A3-494E-877C-56B427D74EEF}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{49478A1D-18B6-499B-84CA-44C0E434EF56}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'SUCCESS',description_in => 'Value is NULL',name_in => 'Value modified by the program is NULL?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{18E88C96-05FE-4877-9143-16FEC48324A6}',parent_universal_id_in => '{469BB94D-19A3-494E-877C-56B427D74EEF}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{9B1BEC17-F6E5-4954-98B0-0DEB645AAF56}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{C60EB01B-0CB0-4E2F-B87B-151358EFE2B5}',parent_universal_id_in => '{469BB94D-19A3-494E-877C-56B427D74EEF}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{B7AF2298-BC7E-4E41-B0B2-ACE005B06E52}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '4',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{89681CC4-57CD-4BEF-99E9-DA54C74D7BDB}',parent_universal_id_in => '{469BB94D-19A3-494E-877C-56B427D74EEF}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{F10EF139-853D-484C-889F-D3E4DCEF0B24}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'adfasdf',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{557FC7D7-2DCB-4F25-9C26-5C05DF86FA8B}',parent_universal_id_in => '{469BB94D-19A3-494E-877C-56B427D74EEF}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{4778A002-479B-4473-9418-B81AE238CEA3}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'SUCCESS',description_in => 'Test succeeded up to this level.',name_in => 'Null string returns NULL',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{B0F2E636-DF49-49B7-9E93-67EF09B1B6C9}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{075770C0-558F-443E-9BC2-6B945D85A906}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{1D903BED-94AE-4719-9320-EFBBCB8E4024}',parent_universal_id_in => '{4778A002-479B-4473-9418-B81AE238CEA3}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{7A02F052-4B4A-42B8-9C5E-6C23AE20FFF1}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'SUCCESS',description_in => ' From Program Value of NULL = Expected Value NULL',name_in => 'Scalar is equal to the expected value?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{AAC6E066-59AD-4AF8-B677-3588A8687608}',parent_universal_id_in => '{4778A002-479B-4473-9418-B81AE238CEA3}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{D8EF07F7-5BB4-444D-805A-3C6EE85FC0D1}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{4778A002-479B-4473-9418-B81AE238CEA3}',parent_universal_id_in => '{4778A002-479B-4473-9418-B81AE238CEA3}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{E6DA12A1-1715-4113-8B5D-2A867193CC9A}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{21B45AAF-4660-44F1-871A-FA6C87BB6C82}',parent_universal_id_in => '{4778A002-479B-4473-9418-B81AE238CEA3}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{F46349CE-0AF7-496D-94D9-58CBE6B6F7BB}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{402A1130-D523-4A93-B6FC-559E654BB863}',parent_universal_id_in => '{4778A002-479B-4473-9418-B81AE238CEA3}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{54C5FD07-DB49-4385-BDD1-96D918670C44}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'SUCCESS',description_in => 'Test succeeded up to this level.',name_in => 'Normal usage - start and end inside string',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{AC2B3531-2D46-4D08-BB23-BC6165A8DAED}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{27A69B2C-6F2E-4ED7-95D9-EEB9BB145F62}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => 'cde',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{54C5FD07-DB49-4385-BDD1-96D918670C44}',parent_universal_id_in => '{54C5FD07-DB49-4385-BDD1-96D918670C44}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{518BD7B0-0D21-442D-B313-F8ABDCB95CC8}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '3',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{7821D702-4D14-41B5-B168-7FB2DDE79696}',parent_universal_id_in => '{54C5FD07-DB49-4385-BDD1-96D918670C44}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{916DD3A5-9012-4E8B-9947-E6FCC175BF71}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '5',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{645EE03F-255D-45F8-BA81-8E94FD077B58}',parent_universal_id_in => '{54C5FD07-DB49-4385-BDD1-96D918670C44}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{9282DCD8-28D7-4E1C-A2AA-5BCC937B7724}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'SUCCESS',description_in => ' From Program Value of "cde" = Expected Value "cde"',name_in => 'Scalar is equal to the expected value?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{5B0C4C9F-AE90-4086-895A-1ECCFB914BA9}',parent_universal_id_in => '{54C5FD07-DB49-4385-BDD1-96D918670C44}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{A7981986-8722-4945-9F53-C0201D72C737}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'abcdefg',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{0F88B5B3-9431-4955-9034-978BFE486C0F}',parent_universal_id_in => '{54C5FD07-DB49-4385-BDD1-96D918670C44}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{55177680-B495-437B-B5F2-691144C1B7B1}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'FAILURE',description_in => 'Test failed at this level.',name_in => 'Zero start same as 1',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{77603809-E138-4A08-B154-327CBE7B4DCD}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{2698CDC7-2E30-4997-9968-D7611CAF232B}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '0',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{F8C716E1-8C42-4F10-AEE8-6E7624806FD9}',parent_universal_id_in => '{55177680-B495-437B-B5F2-691144C1B7B1}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{2989DC07-1157-43D0-9E49-57E1750BC06E}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'abcdefg',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{4ACB1690-9E0B-4B89-8AED-B12BC1D32E45}',parent_universal_id_in => '{55177680-B495-437B-B5F2-691144C1B7B1}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{4137F005-B8D9-4614-B0B4-0A72E86A7F91}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '3',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{BD8DB44D-A842-4854-9125-A29005AAA111}',parent_universal_id_in => '{55177680-B495-437B-B5F2-691144C1B7B1}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{5B5A89A9-84F0-4F50-8BB2-A26AEEB81E87}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => 'abcd',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{55177680-B495-437B-B5F2-691144C1B7B1}',parent_universal_id_in => '{55177680-B495-437B-B5F2-691144C1B7B1}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{97A9EAC1-C284-48BE-8B52-A500CCB28517}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'FAILURE',description_in => ' From Program Value of "abcd" <> Expected Value "abc"',name_in => 'Scalar is equal to the expected value?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{4EA10873-C2E4-4E11-827C-3006BBD8A642}',parent_universal_id_in => '{55177680-B495-437B-B5F2-691144C1B7B1}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{7A781888-E5B9-4926-999D-13947AFF7459}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'SUCCESS',description_in => 'Test succeeded up to this level.',name_in => 'End < Start returns NULL',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{E729EDC6-51DA-4E33-8ED4-A6E4EAAD5086}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{119B2818-B9D0-4996-8A0A-D11C0D31D24D}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'abcdefg',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{86474E16-65B1-4611-A009-510BD2F94F7C}',parent_universal_id_in => '{7A781888-E5B9-4926-999D-13947AFF7459}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{2EDFFCC7-F1C9-48C9-B032-1C49E9C20BDD}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '5',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{C6858622-575F-4E90-A8CB-ED2716409A67}',parent_universal_id_in => '{7A781888-E5B9-4926-999D-13947AFF7459}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{7C293037-0003-4277-94EF-6C67F59AB46D}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '33',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{08CDC8D8-1B6B-40A4-84C7-03D1240630B9}',parent_universal_id_in => '{7A781888-E5B9-4926-999D-13947AFF7459}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{C90C53EC-5872-4ED7-97F7-60F86CB3C25D}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{7A781888-E5B9-4926-999D-13947AFF7459}',parent_universal_id_in => '{7A781888-E5B9-4926-999D-13947AFF7459}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{D0A7BBFB-5A6E-4471-B38D-EC5CFA9027ED}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'SUCCESS',description_in => 'Value is NULL',name_in => 'Value modified by the program is NULL?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{9FC0FBFC-EFFF-4484-AC3A-9EE8E1A54503}',parent_universal_id_in => '{7A781888-E5B9-4926-999D-13947AFF7459}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{8600F9CD-7A50-4644-8631-CD21C2F98F83}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'SUCCESS',description_in => 'Test succeeded up to this level.',name_in => 'Null start returns NULL',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{8566817E-0113-46BA-A567-8B4813D160FB}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{4093F955-5A25-4FB6-A6D4-BE6716FF67B7}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '5',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{4828E7D3-0E48-4B71-A81B-C95008343D7C}',parent_universal_id_in => '{8600F9CD-7A50-4644-8631-CD21C2F98F83}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{4BD6F021-0BE9-4369-8634-D48D8E1CA18F}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'adfadfadf',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{2C5DDBF5-0628-4C9A-AAC6-FBD1E6548969}',parent_universal_id_in => '{8600F9CD-7A50-4644-8631-CD21C2F98F83}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{75755427-57A5-4F3F-9447-04BB7EA6F1D5}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{8600F9CD-7A50-4644-8631-CD21C2F98F83}',parent_universal_id_in => '{8600F9CD-7A50-4644-8631-CD21C2F98F83}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{77F676D3-E1C0-4D5B-BFAD-706C5E0B366D}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'SUCCESS',description_in => ' From Program Value of NULL = Expected Value NULL',name_in => 'Scalar is equal to the expected value?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{C5C50DB2-F726-467D-8B0C-C39836F2E7C6}',parent_universal_id_in => '{8600F9CD-7A50-4644-8631-CD21C2F98F83}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{B763E5EB-4FF2-4B27-AEEC-77D0C738BF26}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{12D17856-AEDE-43ED-9193-B99E58DE6DEC}',parent_universal_id_in => '{8600F9CD-7A50-4644-8631-CD21C2F98F83}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'SUCCESS',description_in => 'Test succeeded up to this level.',name_in => 'End past end of string gets rest of string',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{4B5102E1-01FB-4599-A6DA-063DA125FC1A}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{001D09C5-C782-4E6B-AC24-5A850C495573}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'abcdefg',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{863289E8-B2A0-43A8-A855-0811B5689F44}',parent_universal_id_in => '{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{53E207DB-9AFF-42AE-90C6-60D691007096}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '3333',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{DD2801E6-0FF8-4954-A3CE-4B47C724A81E}',parent_universal_id_in => '{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{908A4C70-94BD-4177-AACF-484B80E61187}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '3',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{80B60018-6C39-4884-B1BA-225D48368B1B}',parent_universal_id_in => '{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{96CE33DC-8E13-46D3-BBD9-4E2F00E54B37}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'SUCCESS',description_in => ' From Program Value of "cdefg" = Expected Value "cdefg"',name_in => 'Scalar is equal to the expected value?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{09E75DF4-4153-4043-B6BB-74AB26AFFF46}',parent_universal_id_in => '{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{DD1FCCEB-21E0-4E97-8B51-C1F3BB94A5C9}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => 'cdefg',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',parent_universal_id_in => '{DAC348C7-B5E1-4034-A69D-ADC15E49C134}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',RESULT_LEVEL_in => 'TESTCASE',result_status_in => 'FAILURE',description_in => 'Test failed at this level.',name_in => 'Negative start and end',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{E49AA54F-7AED-4B59-8AD4-AA17F3740109}',parent_universal_id_in => '{2ACEB7B3-7069-40B7-8EDB-32ECB6820FF6}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{038A6342-8F3C-4F2A-B0D0-3A71E3E36BED}',RESULT_LEVEL_in => 'OUTARG',result_status_in => 'SUCCESS',description_in => '{null}',name_in => 'RETURN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{FB0F61FB-D300-4994-ABEE-D1E558BED3E7}|{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',parent_universal_id_in => '{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{0C8F6681-0D60-4D71-970E-56E809BB9399}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '-2',name_in => 'START_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{535007BA-20B7-4D94-86EB-1C2228E1E16D}',parent_universal_id_in => '{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{3DA83504-B2D5-4BDD-9C25-71F606681E98}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => 'abcdefg',name_in => 'STRING_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{2F727C92-17AB-4B2E-92D7-3C278ADFF435}',parent_universal_id_in => '{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{ADC06A79-B563-4111-9867-71B91FF934FE}',RESULT_LEVEL_in => 'INPUT',result_status_in => 'SUCCESS',description_in => '-4',name_in => 'END_IN',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{569C72A5-9A21-4EC7-87F4-AF34C0AE4734}',parent_universal_id_in => '{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
QU_result_xp.import (universal_id_in => '{C4146F30-DB7B-4397-8235-0858BC3133E5}',RESULT_LEVEL_in => 'OUTCOME',result_status_in => 'FAILURE',description_in => ' From Program Value of NULL <> Expected Value "def"',name_in => 'Scalar is equal to the expected value?',iteration_in => 0,start_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),end_on_in=>TO_DATE(20090310122822, 'YYYYMMDDHH24MISS'),result_universal_id_in => '{39DC2E30-CB85-41E8-A408-B881D200B243}',parent_universal_id_in => '{F5E680BF-8AF3-4A96-BDB8-9457EE04190F}',harness_guid_in => '{38CC8902-D2A7-4FE9-AE1D-8AB641F8637D}',elapsed_time_in => '');
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_RESULTS_1;
/
REM EXECUTE
BEGIN qcto#import_RESULTS_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
REM EXECUTE
BEGIN qu_export_import.upgrade_import (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##BETWNSTR',qu_export_import.import_program_owner()), '1.8.3.385'); qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
REM EXECUTE
BEGIN DECLARE 
      PROCEDURE dropit (NAME_IN IN VARCHAR2)
      IS
         i                  PLS_INTEGER := 1;
         e_does_not_exist   EXCEPTION;
         PRAGMA EXCEPTION_INIT (e_does_not_exist, -4043);
      BEGIN
         BEGIN
            EXECUTE IMMEDIATE 'drop procedure QCTO#IMPORT_' || NAME_IN;
         EXCEPTION WHEN OTHERS THEN NULL; END;

         LOOP
            BEGIN
               EXECUTE IMMEDIATE    'drop procedure QCTO#IMPORT_'
                                 || NAME_IN || '_' || i;
            EXCEPTION
               WHEN e_does_not_exist THEN EXIT;
               WHEN OTHERS THEN NULL;
            END;
            i := i + 1;
         END LOOP;
      EXCEPTION WHEN OTHERS THEN NULL;
      END dropit;
   BEGIN
      IF qu_config.my_codetester_boolean ('remove_import_procedures', TRUE)
      THEN
         dropit ('SUITE');
         dropit ('HARNESS');
         dropit ('UNITTEST');
         dropit ('TESTCASE');
         dropit ('RESULTS');
         dropit ('INPUT');
         dropit ('OUTCOME');
         dropit ('SOURCECODE_HDR');
         dropit ('SOURCECODE');
         dropit ('TEST_DATA_GROUP');
         dropit ('CLEAR_CACHES');
         dropit ('CLEAR_CACHES');
         dropit ('TEST_DEFINITION');
      END IF;
      QU_CONFIG.TRACE_SUBPROG_END ('Export');
   END; qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
